// Generated by CoffeeScript 1.3.3

/*
 *
 * JavaScript plugin to calculate the time remaining between two
 * dates in common units of time.
 *
 *
 * Settings are able to be passed into the Countdown object both
 * globally through the 'defaults' object like:
 *
 *   $.fn.countdown.defaults = {
 *     example: 'data'
 *   };
 *
 *
 * or through the data attached on an element like:
 *
 *   <div id="countdown" data-example="data"></div>
 *
 *
 * Note:  If values are set in both places, then the information
 *        set on the element will override the settings in the
 *        'defaults' object
 *
 *
 * Several units of time can be returned. The values you need returned
 * should be passed to the settings in an array named 'values' like:
 *
 *   $.fn.countdown.defaults = {
 *     values  : ["years", "months", "weeks", "days", "hours", "minutes", "seconds"]
 *   };
 *
 *
*/


(function() {

  (function(jQuery, window) {
    var Countdown, Timer, console, name;
    console = window.console;
    name = "countdown";
    Timer = (function() {

      function Timer(tick) {
        this.tick = tick;
        this.interval = 1000;
        this.enable = false;
        this.timerId = 0;
      }

      Timer.prototype.start = function() {
        var fn,
          _this = this;
        this.enable = true;
        fn = function() {
          if (_this.enable) {
            return _this.tick();
          }
        };
        return this.timerId = setInterval(fn, this.interval);
      };

      Timer.prototype.stop = function() {
        this.enable = false;
        return clearInterval(this.timerId);
      };

      return Timer;

    })();
    Countdown = (function() {

      function Countdown(element, settings) {
        var current, days, hours, minutes, monthLength, monthSetter, months, seconds, units,
          _this = this;
        this.element = element;
        this.startdate = new Date();
        this.enddate = settings.enddate;
        this.remaining = {};
        /*
               * To account for leap years, February is set as a function that
               * will take into account if the next February from the current date
               * has a bonus day.
        */

        units = {
          seconds: 60,
          minutes: 60,
          hours: 24,
          days: [
            31, (function() {
              var d;
              d = new Date(_this.startdate.getFullYear() + (_this.startdate.getMonth() >= 2 ? 1 : 0), 2, 0);
              return d.getDate();
            })(), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
          ],
          weeks: 7,
          months: 12,
          years: 365
        };
        /*
              # console.log cleanArray settings.values, units
              
              for unit of units
                value = units[unit]
                if !!value and $.inArray(unit, settings.values) isnt -1
                  console.log unit, value
        */

        /*
               * difference between two dates in seconds
        */

        seconds = Math.floor((this.enddate - this.startdate) / 1000);
        /*
               * Set the remaining seconds by checking how many
               * seconds remain with the removal of minutes.
               * Then find the remaining minutes by dividing by 60 seconds,
               * and rounding down to a whole number.
        */

        this.remaining.seconds = seconds % units.seconds;
        minutes = Math.floor(seconds / units.seconds);
        /*
               * Repeat for minutes.
        */

        this.remaining.minutes = minutes % units.minutes;
        hours = Math.floor(minutes / units.minutes);
        /*
               * Repeat for hours.
        */

        this.remaining.hours = hours % units.hours;
        /*
               * Find total number of days.
               * We will use this number to extract months and years.
        */

        days = Math.floor(hours / units.hours);
        /*
               * Remove the number of full years
        */

        this.remaining.years = Math.floor(days / units.years);
        /*
               * Reassign days with only the remainding after removing years.
        */

        days = days % units.years;
        /*
               * Set the starting positions for the countdown.
        */

        months = 0;
        current = this.startdate.getMonth();
        monthLength = units.days[current];
        /*
               * Create an IIFE that will call itsself until it has less days
               * remaining than days in the month it's checking for.
        */

        monthSetter = function() {
          if (days >= monthLength) {
            days = days - monthLength;
            months = months + 1;
            current = current + 1;
            monthLength = units.days[current];
            return monthSetter();
          } else {
            _this.remaining.months = months;
            return _this.remaining.days = days;
          }
        };
        monthSetter();
        this.timer = new Timer(function() {
          return _this.element.trigger("updateTime", _this.remaining);
        });
      }

      return Countdown;

    })();
    /*
       *
       * Attach the class to the jQuery object
       *
    */

    $.fn[name] = function(params) {
      return $(this).each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data(name) ? $this.data(name) : (function() {
          $this.data(name, new Countdown($this, $.extend(true, {}, $.fn[name].defaults, $this.data())));
          return $this.data(name);
        })();
        if (!!params && typeof params === "string") {
          return typeof data[params] === "function" ? data[params](data[params]()) : void 0;
        }
      });
    };
    /*
       *
       * Set the defaults
       *
    */

    $.fn[name].defaults = {
      enddate: new Date("11:59 PM Dec 31 2012 CST"),
      values: ["years", "months", "weeks", "days", "seconds", "hours"]
    };
    return $("#countdown")[name]().on("updateTime", function(e, params) {
      return console.log("updateTime", params);
    });
  })($, window);

}).call(this);
